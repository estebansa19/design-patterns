What is a design pattern?

Design patterns are typical solutions to very common problems in software design.

You can't find a pattern and copy it into your program, it is not a specific piece of code, but a
general concept for solving a particular problem. You can follow the pattern details and implement
a solution that suits the nature of your own program.

Patterns are usually confused with algorithms, because both concepts are describe typical solutions
to known problems. While an algorithm always defines a clear set of actions or kind of a step by
step guide, a pattern is a more high-level description of a solution. The code of the same pattern
in two programs may be different.

An analogy to an algorithm is a cooking recipe, is a step by step guide. On the other hand, a
pattern is more like a blueprint, you can see what the results and its features are but the exact
order of implementation is up to you.



What does the pattern consist of?

Here are the sections that are usually present in a pattern description

- Intent, briefly describes both the problem and the solution.
- Motivation, explains the problem and the solution the pattern makes possible.
- Structure, shows each part of the pattern and how they are related.
- Code example, makes it easier to grasp the idea behind the pattern.



Why should I learn design patterns?

They're a toolkit of tried an tested solutions to common problems in software design.

Even if you don't use the patterns, knowing patterns is still useful because they define a common
language that you and your teammates can use to communicate more efficiently, you can say: "Just use
a Singleton for that", and everyone will understand what's the idea.
